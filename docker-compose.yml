services:
  caddy:
    container_name: caddy
    image: caddy:latest
    restart: unless-stopped
    networks:
      - caddy-internal
    # We need to explicitly indicate the env file so that we can populate the variables in the Caddyfile as well.
    env_file:
      - .env
    ports:
      - ${GHOST_REVERSE_PROXY_PORT}:${GHOST_REVERSE_PROXY_PORT}
      - ${GHOST_REVERSE_PROXY_CADDY_PORT}:${GHOST_REVERSE_PROXY_CADDY_PORT}
      - ${FLAME_REVERSE_PROXY_PORT}:${FLAME_REVERSE_PROXY_PORT}
      - ${MEMOS_REVERSE_PROXY_PORT}:${MEMOS_REVERSE_PROXY_PORT}
      - ${SYNCTHING_REVERSE_PROXY_PORT}:${SYNCTHING_REVERSE_PROXY_PORT}
      - ${IMMICH_REVERSE_PROXY_PORT}:${IMMICH_REVERSE_PROXY_PORT}
      - ${RADICALE_REVERSE_PROXY_PORT}:${RADICALE_REVERSE_PROXY_PORT}
      - ${NTFY_REVERSE_PROXY_PORT}:${NTFY_REVERSE_PROXY_PORT}
      - ${ISAIAH_REVERSE_PROXY_PORT}:${ISAIAH_REVERSE_PROXY_PORT}
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./tailscale/tmp/tailscaled.sock:/var/run/tailscale/tailscaled.sock
    labels:
      - com.centurylinklabs.watchtower.enable=true

  flame:
    container_name: flame
    image: pawelmalak/flame:latest
    restart: unless-stopped
    networks:
      - caddy-internal
    volumes:
      - ${FLAME_VOLUME}:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    secrets:
      - password
    environment:
      - PASSWORD_FILE=/run/secrets/password
    labels:
      - com.centurylinklabs.watchtower.enable=true

  syncthing:
    container_name: syncthing
    image: syncthing/syncthing:latest
    restart: unless-stopped
    networks:
      - caddy-internal
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ${SYNCTHING_VOLUME}:/var/syncthing
    labels:
      - flame.type=application
      - flame.name=Syncthing
      - flame.url=${SYNCTHING_URL}
      - flame.icon=custom
      - com.centurylinklabs.watchtower.enable=true

  redis:
    container_name: redis
    image: redis:alpine
    restart: unless-stopped
    networks:
      - caddy-internal
    command: redis-server --save "" --appendonly "no"
    tmpfs:
      - /var/lib/redis
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    volumes:
      - redis:/data
    labels:
      - com.centurylinklabs.watchtower.enable=true

  radicale:
    container_name: radicale
    image: tomsquest/docker-radicale:latest
    restart: unless-stopped
    networks:
      - caddy-internal
    init: true
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - CHOWN
      - KILL
    volumes:
      - ${RADICALE_DATE_VOLUME}:/data
      - ${RADICALE_CONFIG_VOLUME}:/config:ro
    labels:
      - flame.type=application
      - flame.name=Radicale
      - flame.url=${RADICALE_URL}
      - flame.icon=custom
      - com.centurylinklabs.watchtower.enable=true

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:release
    restart: unless-stopped
    networks:
      - caddy-internal
    env_file:
      - .env
    ports:
     - 2283:3001
    volumes:
      - ${IMMICH_VOLUME}:/usr/src/app/upload
    depends_on:
      - redis
      - database
    labels:
      - flame.type=application
      - flame.name=Immich
      - flame.url=${IMMICH_URL}
      - flame.icon=custom

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:release
    restart: unless-stopped
    networks:
      - caddy-internal
    volumes:
      - model-cache:/cache

  database:
    container_name: immich_postgres
    image: tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    restart: unless-stopped
    networks:
      - caddy-internal
    environment:
      POSTGRES_HOST: ${DB_HOSTNAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE_NAME}
    volumes:
      - ${DB_VOLUME}:/var/lib/postgresql/data

  pgbackups:
    container_name: pgbackups
    image: prodrigestivill/postgres-backup-local:latest
    restart: unless-stopped
    networks:
      - caddy-internal
    environment:
      POSTGRES_HOST: ${DB_HOSTNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      SCHEDULE: ${PG_BACKUPS_SCHEDULE}
    volumes:
      - ${PG_BACKUPS_VOLUME}:/backups
      - ${DB_VOLUME}:/var/lib/postgresql/data
    depends_on:
      - database
    labels:
      - com.centurylinklabs.watchtower.enable=true

  tailscale:
    # This needs to be set to 'catallenya' as the certificates generated are associated with this name.
    hostname: catallenya
    container_name: tailscaled
    image: tailscale/tailscale:latest
    restart: unless-stopped
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - /dev/net/tun:/dev/net/tun
      - ./tailscale/data:/var/lib
      # Adds volume for the tailscaled.sock so its present on the host system where caddy communicates with tailscale. See: https://github.com/tailscale/tailscale/issues/6849
      - ./tailscale/tmp:/tmp
    environment:
      # Persist the state in host and survives container reboot. See: https://github.com/tailscale/tailscale/issues/4913#issuecomment-1186402307
      - TS_STATE_DIR=/var/lib/tailscale
      # Use TS_AUTH_KEY on initial boot. This key will be persisted in var/lib/tailscale and can be removed on subsequent runs.
    labels:
      - com.centurylinklabs.watchtower.enable=true

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    restart: unless-stopped
    networks:
      - caddy-internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=${NTFY_PROTOCOL_URL}/${WATCHTOWER_NTFY_TOPIC}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_REMOVE_VOLUMES=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - com.centurylinklabs.watchtower.enable=true

  ghost:
    container_name: ghost
    image: ghost:latest
    restart: unless-stopped
    networks:
      - caddy-internal
    environment:
      - database__client=sqlite3
      - database__connection__filename=/var/lib/ghost/content/data/ghost.db
      - url=${PUBLIC_URL}
    volumes:
      - ${GHOST_VOLUME}:/var/lib/ghost/content
    labels:
      - flame.type=application
      - flame.name=Ghost
      - flame.url=${GHOST_URL}
      - flame.icon=custom
      - com.centurylinklabs.watchtower.enable=true

  ntfy:
    container_name: ntfy
    image: binwiederhier/ntfy
    restart: unless-stopped
    networks:
      - caddy-internal
    command:
      - serve
    volumes:
      - ntfy-cache:/var/cache/ntfy
      - ntfy:/etc/ntfy
    labels:
      - flame.type=application
      - flame.name=ntfy
      - flame.url=${NTFY_URL}
      - flame.icon=custom
      - com.centurylinklabs.watchtower.enable=true
  
  memos:
    container_name: memos
    image: neosmemo/memos:latest
    restart: unless-stopped
    networks:
      - caddy-internal
    volumes:
      - ${MEMOS_VOLUME}:/var/opt/memos
    labels:
      - flame.type=application
      - flame.name=Memos
      - flame.url=${MEMOS_URL}
      - flame.icon=custom
      - com.centurylinklabs.watchtower.enable=true

  cloudflared:
    container_name: cloudflared
    image: cloudflare/cloudflared
    restart: unless-stopped
    networks:
      - caddy-internal
    command: tunnel -credentials-file /run/secrets/cloudflared-token run catallenya-sev
    secrets:
      - cloudflared-token
    labels:
      - com.centurylinklabs.watchtower.enable=true

  isaiah:
    container_name: isaiah
    image: mosswill/isaiah:latest
    restart: unless-stopped
    networks:
      - caddy-internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      SERVER_PORT: "80"
      AUTHENTICATION_ENABLED: false
    labels:
      - flame.type=application
      - flame.name=Isaiah
      - flame.url=${ISAIAH_URL}
      - flame.icon=custom
      - com.centurylinklabs.watchtower.enable=true
  
secrets:
  password:
    file: flame/token.json
  cloudflared-token:
    file: cloudflared/token.json

volumes:
  redis:
  model-cache:
  ntfy:
  ntfy-cache:

networks:
  caddy-internal:
    external: false
